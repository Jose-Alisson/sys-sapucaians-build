# version: '3.8'
services:
  mysqldb:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: admin
    ports:
      - "3307:3306"
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - my-network

  pedidos:
    # build:
    #   context: pedidos/
    #   dockerfile: Dockerfile
    image: alisson9986/syssapucaiansmain-pedidos:latest
    container_name: sys-sapucaians-pedidos
    environment:
      - DATABASE_URL=jdbc:mysql://mysqldb/db
      - DATABASE_USERNAME=root
      - DATABASE_PASSWORD=admin
      - API_MAIN=http://main:4040
    networks:
      - my-network
    depends_on:
      - mysqldb
    # ports:
    #   - '8000:8080'

  main:
    # build:
    #   context: principal/
    #   dockerfile: Dockerfile
    image: alisson9986/syssapucaiansmain-main:latest
    container_name: sys-sapucaians-main
    environment:
      - PEDIDOS_URL=http://pedidos:8080
    networks:
      - my-network
    volumes:
      - main-data:/main/data
      - ./pass/main:/main/public
    depends_on:
      - pedidos
    # ports:
    #   - '4000:4000'

  # admin:
  #   build:
  #     context: admin/
  #     dockerfile: Dockerfile
  #   ports:
  #     - '5000:80'
  #   depends_on:
  #     - main
  #     - pedidos
  #   networks:
  #     - my-network
  
  client:
    # build:
    #   context: client/
    #   dockerfile: Dockerfile
    image: alisson9986/syssapucaiansmain-client:latest
    ports:
      - '3000:80'
    depends_on:
      - main
      - pedidos
    networks:
      - my-network

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "81:80"  # Expondo a porta 80 do container para a porta 80 do host
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf  # Mapeando o arquivo de configuração
  #   networks:
  #     - my-network

networks:
  my-network:
    driver: bridge

volumes:
  db-data:
  main-data:
